name: Polybot Microservice Deployment

on:
  push:
    paths:
      - 'polybot/**'
    branches:
      - main

jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo code
        uses: actions/checkout@v2

      - name: Build and push image
        run: |
          cd polybot

          # Login to DockerHub:
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}

          POLYBOT_IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/polybot:0.0.${{ github.run_number }}
          docker build -t $POLYBOT_IMAGE_NAME .
          docker push $POLYBOT_IMAGE_NAME

  Deploy:
    runs-on: ubuntu-latest
    needs:
      - Build

    strategy:
      matrix:
        region: ['eu-west-1']
        # Add your desired regions here

    env:
      AWS_DEFAULT_REGION: ${{ matrix.region }}
      AWS_REGION: ${{ matrix.region }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
      TF_PROJECT_PRIVATE_KEY: ${{ secrets.TF_PROJECT_PRIVATE_KEY }}

    steps:
      - name: Checkout the repo code
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ matrix.region }}

      - name: Fetch EC2 Instance IP Addresses
        id: fetch-ec2-instances
        run: |
          EC2_INSTANCE_DETAILS=$(aws ec2 describe-instances --region ${{ matrix.region }} --filters "Name=tag:Name,Values=*polybot*" "Name=tag:Name,Values=*yaelwil*" "Name=tag:Name,Values=*tf-project*" --query 'Reservations[*].Instances[*].[InstanceId,State.Name,PublicIpAddress]' --output json)
          echo "$EC2_INSTANCE_DETAILS" > instance_details.json
      
          EC2_POLYBOT_IP_ADDRESSES=$(echo "$EC2_INSTANCE_DETAILS" | jq -r '.[][] | select(.[1] == "running") | .[2]' | tr '\n' ' ')
          echo "EC2_POLYBOT_IP_ADDRESSES=$EC2_POLYBOT_IP_ADDRESSES" >> $GITHUB_ENV

      - name: Fetch BUCKET_NAME
        run: |
          BUCKET_NAME=$(aws s3api list-buckets --region ${{ matrix.region }} --query "Buckets[].Name" --output json | jq -r '.[] | select(contains("yaelwil") and endswith("tf-project"))')
          echo "BUCKET_NAME=$(echo "$BUCKET_NAME" | tr -d '\n')" >> $GITHUB_ENV

      - name: Fetch ALB_URL
        run: |
          ALB_URL=$(aws elbv2 describe-load-balancers --region ${{ matrix.region }} --query "LoadBalancers[?contains(LoadBalancerName, 'yaelwil') && contains(LoadBalancerName, 'tf-project') && contains(LoadBalancerName, 'alb')].DNSName | [0]" --output text)
          echo "ALB_URL=$(echo "$ALB_URL" | tr -d '\n')" >> $GITHUB_ENV

      - name: Fetch DYNAMODB_TABLE_NAME
        run: |
          DYNAMODB_TABLE_NAME=$(aws dynamodb list-tables --region ${{ matrix.region }} --query "TableNames[?contains(@, 'yaelwil') && contains(@, 'tf-project')]" --output text)
          echo "DYNAMODB_TABLE_NAME=$(echo "$DYNAMODB_TABLE_NAME" | tr -d '\n')" >> $GITHUB_ENV

      - name: Fetch FILTERS_QUEUE_URL
        run: |
          FILTERS_QUEUE_URL=$(aws sqs list-queues --region ${{ matrix.region }} --query "QueueUrls[?contains(@, 'yaelwil') && contains(@, 'tf-project') && contains(@, 'filters')]" --output text)
          echo "FILTERS_QUEUE_URL=$(echo "$FILTERS_QUEUE_URL" | tr -d '\n')" >> $GITHUB_ENV

      - name: Fetch YOLO_QUEUE_URL
        run: |
          YOLO_QUEUE_URL=$(aws sqs list-queues --region ${{ matrix.region }} --query "QueueUrls[?contains(@, 'yaelwil') && contains(@, 'tf-project') && contains(@, 'yolov5')]" --output text)
          echo "YOLO_QUEUE_URL=$(echo "$YOLO_QUEUE_URL" | tr -d '\n')" >> $GITHUB_ENV

      - name: Generate .env file
        run: |
          echo "BUCKET_NAME=${{ env.BUCKET_NAME }}" >> .env
          echo "TELEGRAM_APP_URL=${{ env.ALB_URL }}" >> .env
          # Replace https:// with http:// and append :80
          ALB_URL_HTTP=$(echo "http://${{ env.ALB_URL }}:80")
          echo "ALB_URL=${ALB_URL_HTTP}" >> .env
          echo "REGION=${{ matrix.region }}" >> .env
          echo "DYNAMODB_TABLE_NAME=${{ env.DYNAMODB_TABLE_NAME }}" >> .env
          echo "YOLO_QUEUE_NAME=${{ env.YOLO_QUEUE_URL }}" >> .env
          echo "FILTERS_QUEUE_NAME=${{ env.FILTERS_QUEUE_URL }}" >> .env
          echo "TELEGRAM_TOKEN=${{ env.TELEGRAM_TOKEN }}" >> .env

      - name: Create SSH key file and Copy ENV file to EC2 instances
        run: |
          POLYBOT_IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/polybot:0.0.${{ github.run_number }}
          echo "${{ secrets.TF_PROJECT_PRIVATE_KEY }}" > ssh_key.pem
          sudo chmod 400 ssh_key.pem
          
          # Split IP addresses into an array
          IFS=' ' read -r -a IPS <<< "$EC2_POLYBOT_IP_ADDRESSES"
          for IP in "${IPS[@]}"; do
            echo "Deploying to $IP"
          
            # Copy .env file to EC2 instance
            scp -o StrictHostKeyChecking=no -i ssh_key.pem .env ubuntu@$IP:/home/ubuntu/.env
      
            ssh -o StrictHostKeyChecking=no -i ssh_key.pem ubuntu@$IP << EOF
            sudo docker pull $POLYBOT_IMAGE_NAME || { echo "Failed to pull image on $IP"; exit 1; }
            sudo docker stop polybot || true
            sudo docker rm polybot || true
            sudo docker run -d -p 8443:8443 --restart=always --name polybot --env-file /home/ubuntu/.env $POLYBOT_IMAGE_NAME || { echo "Failed to run container on $IP"; exit 1; }
            sudo docker system prune -a -f || { echo "Failed to prune Docker system on $IP"; exit 1; }
          EOF
            done
