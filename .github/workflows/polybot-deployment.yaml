name: Polybot Microservice Deployment

on:
  push:
    paths:
      - 'polybot/**'
    branches:
      - main

jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo code
        uses: actions/checkout@v2

      - name: Build and push image
        run: |
          cd polybot
          
          # Login to DockerHub         
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}

          # Build and push Docker image
          POLYBOT_IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/polybot:0.0.${{ github.run_number }}
          docker build -t $POLYBOT_IMAGE_NAME .
          docker push $POLYBOT_IMAGE_NAME

  Deploy:
    runs-on: ubuntu-latest
    needs: Build

    steps:
      - name: Checkout the repo code
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Fetch EC2 Instance Details
        id: fetch-details
        run: |
          EC2_INSTANCE_DETAILS=$(aws ec2 describe-instances --region eu-west-2 --filters "Name=tag:Name,Values=*polybot*" "Name=tag:Name,Values=*yaelwil*" --query 'Reservations[*].Instances[*].[InstanceId,State.Name,PublicIpAddress]' --output json)
          echo "$EC2_INSTANCE_DETAILS" > instance_details.json

          EC2_INSTANCE_IDS=$(echo "$EC2_INSTANCE_DETAILS" | jq -r '.[][] | select(.[1] == "stopped") | .[0]' | tr '\n' ' ')
          EC2_POLYBOT_IP_ADDRESSES=$(echo "$EC2_INSTANCE_DETAILS" | jq -r '.[][] | select(.[1] == "running") | .[2]' | tr '\n' ' ')
          echo "EC2_INSTANCE_IDS=$EC2_INSTANCE_IDS" >> $GITHUB_ENV
          echo "EC2_POLYBOT_IP_ADDRESSES=$EC2_POLYBOT_IP_ADDRESSES" >> $GITHUB_ENV

      - name: Start Stopped Instances
        if: env.EC2_INSTANCE_IDS != ''
        run: |
          for INSTANCE_ID in $EC2_INSTANCE_IDS; do
            echo "Starting instance $INSTANCE_ID"
            aws ec2 start-instances --instance-ids $INSTANCE_ID --region eu-west-2
          done

      - name: Wait for Instances to be Running
        if: env.EC2_INSTANCE_IDS != ''
        run: |
          for INSTANCE_ID in $EC2_INSTANCE_IDS; do
            echo "Waiting for instance $INSTANCE_ID to be running"
            aws ec2 wait instance-running --instance-ids $INSTANCE_ID --region eu-west-2
          done

      - name: Fetch EC2 Instance IP Addresses Again
        if: env.EC2_INSTANCE_IDS != ''
        run: |
          NEW_RUNNING_INSTANCE_IPS=$(aws ec2 describe-instances --region eu-west-2 --instance-ids $EC2_INSTANCE_IDS --query 'Reservations[*].Instances[*].PublicIpAddress' --output text | grep -v 'None' | tr '\n' ' ')
          echo "NEW_RUNNING_INSTANCE_IPS=$NEW_RUNNING_INSTANCE_IPS" >> $GITHUB_ENV
          EC2_POLYBOT_IP_ADDRESSES="$EC2_POLYBOT_IP_ADDRESSES $NEW_RUNNING_INSTANCE_IPS"
          echo "EC2_POLYBOT_IP_ADDRESSES=$EC2_POLYBOT_IP_ADDRESSES" >> $GITHUB_ENV

      - name: Copy .env file to EC2 instances
        run: |
          ENV_FILE="./polybot/.env"
          IFS=' ' read -r -a IPS <<< "$EC2_POLYBOT_IP_ADDRESSES"
          for IP in "${IPS[@]}"; do
            echo "Copying .env file to $IP"
            scp -o StrictHostKeyChecking=no -i ${{ secrets.PRIVATE_KEY }} $ENV_FILE ec2-user@$IP:/home/ec2-user/polybot/.env || { echo "Failed to copy .env file to $IP"; exit 1; }
          done

      - name: Deploy new version
        run: |
          POLYBOT_IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/polybot:0.0.${{ github.run_number }}
          IFS=' ' read -r -a IPS <<< "$EC2_POLYBOT_IP_ADDRESSES"
          for IP in "${IPS[@]}"; do
            echo "Deploying to $IP"
            ssh -o StrictHostKeyChecking=no -i /path/to/your-key.pem ec2-user@$IP << EOF || { echo "Failed to SSH into $IP"; exit 1; }
              docker pull $POLYBOT_IMAGE_NAME || { echo "Failed to pull image on $IP"; exit 1; }
              sudo docker stop polybot || true
              sudo docker rm polybot || true
              sudo docker run -d -p 8443:8443 --restart=always --name polybot --env-file /home/ec2-user/polybot/.env $POLYBOT_IMAGE_NAME || { echo "Failed to run container on $IP"; exit 1; }
            EOF
          done

      - name: Notify on failure
        if: failure()
        run: echo "Deployment failed. Please check the logs for more details."

      - name: Notify on success
        if: success()
        run: echo "Deployment succeeded."