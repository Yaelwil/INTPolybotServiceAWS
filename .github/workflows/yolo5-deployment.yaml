name: Yolov5 Microservice Deployment

on:
  push:
    paths:
      - 'yolo5/**'
    branches:
      - main

jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo code
        uses: actions/checkout@v2

      - name: Build and push image
        run: |
          cd yolo5

          # Login to DockerHub:
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}

          YOLOV5_IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/yolov5:0.0.${{ github.run_number }}
          docker build -t $YOLOV5_IMAGE_NAME .
          docker push $YOLOV5_IMAGE_NAME

  Deploy:
    runs-on: ubuntu-latest
    needs:
      - Build

    strategy:
      matrix:
        region: ['eu-west-1']
        # Add your desired regions here

    env:
      AWS_DEFAULT_REGION: ${{ matrix.region }}
      AWS_REGION: ${{ matrix.region }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
      ALB_URL: ${{ secrets.ALB_URL }}
      DYNAMODB_TABLE_NAME: ${{ secrets.DYNAMODB_TABLE_NAME }}
      FILTERS_QUEUE_URL: ${{ secrets.FILTERS_QUEUE_URL }}
      YOLO_QUEUE_URL: ${{ secrets.YOLO_QUEUE_URL }}
      EC2_INSTANCE_IDS: ${{ secrets.EC2_INSTANCE_IDS }}
      EC2_FILTERS_IP_ADDRESSES: ${{ secrets.EC2_FILTERS_IP_ADDRESSES }}
      NEW_RUNNING_INSTANCE_IPS: ${{ secrets.NEW_RUNNING_INSTANCE_IPS }}
      KEY: ${{ secrets.TF_PROJECT_PRIVATE_KEY }}

    steps:
      - name: Checkout the repo code
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ matrix.region }}

      - name: Fetch EC2 Instance IP Addresses
        id: fetch-ec2-instances
        run: |
          EC2_INSTANCE_DETAILS=$(aws ec2 describe-instances --region ${{ matrix.region }} --filters "Name=tag:Name,Values=*yolov5*" "Name=tag:Name,Values=*yaelwil*" "Name=tag:Name,Values=*tf-project*" --query 'Reservations[*].Instances[*].[InstanceId,State.Name,PublicIpAddress]' --output json)
          echo "$EC2_INSTANCE_DETAILS" > instance_details.json
          cat instance_details.json
      
          EC2_YOLOV5_IP_ADDRESSES=$(echo "$EC2_INSTANCE_DETAILS" | jq -r '.[][] | select(.[1] == "running") | .[2]' | tr '\n' ' ')
          echo "EC2_YOLOV5_IP_ADDRESSES=$EC2_YOLOV5_IP_ADDRESSES" >> $GITHUB_ENV
          echo "EC2_YOLOV5_IP_ADDRESSES=$EC2_YOLOV5_IP_ADDRESSES"

      - name: Fetch BUCKET_NAME
        run: |
          BUCKET_NAME=$(aws s3api list-buckets --query "Buckets[?contains(Name, 'yaelwil') && contains(Name, 'tf-project') && contains(Name, 'bucket')].Name | [0]" --output text)
          echo "BUCKET_NAME=$BUCKET_NAME" >> $GITHUB_ENV

      - name: Fetch ALB_URL
        run: |
          ALB_URL=$(aws elbv2 describe-load-balancers --query "LoadBalancers[?contains(LoadBalancerName, 'yaelwil') && contains(LoadBalancerName, 'tf-project') && contains(LoadBalancerName, 'alb')].DNSName | [0]" --output text)
          echo "ALB_URL=$ALB_URL" >> $GITHUB_ENV

      - name: Fetch DYNAMODB_TABLE_NAME
        run: |
          DYNAMODB_TABLE_NAME=$(aws dynamodb list-tables --query "TableNames[?contains(@, 'yaelwil') && contains(@, 'tf-project')]" --output text)
          echo "DYNAMODB_TABLE_NAME=$DYNAMODB_TABLE_NAME" >> $GITHUB_ENV

      - name: Fetch FILTERS_QUEUE_URL
        run: |
          FILTERS_QUEUE_URL=$(aws sqs list-queues --query "QueueUrls[?contains(@, 'yaelwil') && contains(@, 'tf-project') && contains(@, 'filters')]" --output text)
          echo "FILTERS_QUEUE_URL=$FILTERS_QUEUE_URL" >> $GITHUB_ENV

      - name: Fetch YOLO_QUEUE_URL
        run: |
          YOLO_QUEUE_URL=$(aws sqs list-queues --query "QueueUrls[?contains(@, 'yaelwil') && contains(@, 'tf-project') && contains(@, 'yolov5')]" --output text)
          echo "YOLO_QUEUE_URL=$YOLO_QUEUE_URL" >> $GITHUB_ENV

      - name: Generate .env file
        run: |
          echo "TELEGRAM_TOKEN=${{ secrets.TELEGRAM_TOKEN }}" >> .env
          echo "BUCKET_NAME=${{ env.BUCKET_NAME }}" >> .env
          
          echo "TELEGRAM_APP_URL= ${{ env.ALB_URL }}" >> .env
          
          # Replace https:// with http:// and append :80
          ALB_URL_HTTP=$(echo "https://${{ env.ALB_URL }}" | sed 's#^https://#http://#')
          echo "ALB_URL=${ALB_URL_HTTP}:80" >> .env
          
          echo "REGION=${{ matrix.region }}" >> .env
          echo "DYNAMODB_TABLE_NAME=${{ env.DYNAMODB_TABLE_NAME }}" >> .env
          echo "YOLO_QUEUE_NAME=${{ env.YOLO_QUEUE_URL }}" >> .env
          echo "FILTERS_QUEUE_NAME=${{ env.FILTERS_QUEUE_URL }}" >> .env

      - name: Create SSH key file and Copy ENV file to EC2 instances
        run: |
          YOLOV5_IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/yolov5:0.0.${{ github.run_number }}
          echo "${{ secrets.TF_PROJECT_PRIVATE_KEY }}" > ssh_key.pem
          sudo chmod 400 ssh_key.pem
          
          # Split IP addresses into an array
          IFS=' ' read -r -a IPS <<< "$EC2_YOLOV5_IP_ADDRESSES"
          for IP in "${IPS[@]}"; do
            echo "Deploying to $IP"
          
            # Copy .env file to EC2 instance
            scp -o StrictHostKeyChecking=no -i ssh_key.pem .env ubuntu@$IP:/home/ubuntu/.env || { echo "Failed to copy .env to $IP"; exit 1; }
      
            ssh -o StrictHostKeyChecking=no -i ssh_key.pem ubuntu@$IP << EOF
            sudo docker pull $YOLOV5_IMAGE_NAME || { echo "Failed to pull image on $IP"; exit 1; }
            sudo docker stop yolov5 || true
            sudo docker rm yolov5 || true
            sudo docker run -d -p 8080:8080 --restart=always --name yolov5 --env-file /home/ubuntu/.env $YOLOV5_IMAGE_NAME || { echo "Failed to run container on $IP"; exit 1; }
            sudo docker system prune -a -f || { echo "Failed to prune Docker system on $IP"; exit 1; }
          EOF
            done
